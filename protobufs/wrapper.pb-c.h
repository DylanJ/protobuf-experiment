/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_wrapper_2eproto__INCLUDED
#define PROTOBUF_C_wrapper_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS

#include "handshake.pb-c.h"
#include "input.pb-c.h"
#include "lobby.pb-c.h"

typedef struct _WrapperMessage WrapperMessage;


/* --- enums --- */

typedef enum _WrapperMessage__Type {
  WRAPPER_MESSAGE__TYPE__HANDSHAKE = 1,
  WRAPPER_MESSAGE__TYPE__INPUT = 2,
  WRAPPER_MESSAGE__TYPE__LOBBY_JOIN = 3,
  WRAPPER_MESSAGE__TYPE__LOBBY_LEAVE = 4,
  WRAPPER_MESSAGE__TYPE__LOBBY_CHAT = 5,
  WRAPPER_MESSAGE__TYPE__LOBBY_WHO = 6
} WrapperMessage__Type;

/* --- messages --- */

struct  _WrapperMessage
{
  ProtobufCMessage base;
  WrapperMessage__Type type;
  HandshakeMessage *handshake_message;
  InputMessage *input_message;
  NET__LobbyJoin *lobby_join_message;
  NET__LobbyLeave *lobby_leave_message;
  NET__LobbyChat *lobby_chat_message;
  NET__LobbyWho *lobby_who_message;
};
#define WRAPPER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wrapper_message__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL }


/* WrapperMessage methods */
void   wrapper_message__init
                     (WrapperMessage         *message);
size_t wrapper_message__get_packed_size
                     (const WrapperMessage   *message);
size_t wrapper_message__pack
                     (const WrapperMessage   *message,
                      uint8_t             *out);
size_t wrapper_message__pack_to_buffer
                     (const WrapperMessage   *message,
                      ProtobufCBuffer     *buffer);
WrapperMessage *
       wrapper_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wrapper_message__free_unpacked
                     (WrapperMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*WrapperMessage_Closure)
                 (const WrapperMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor wrapper_message__descriptor;
extern const ProtobufCEnumDescriptor    wrapper_message__type__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_wrapper_2eproto__INCLUDED */
